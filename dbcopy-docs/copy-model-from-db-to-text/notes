Operation:
    Copy all data corresponding to a particular model (model metadata, scenarios, parameter tables, run results, output tables, tasks) from model database to a text archive (.json and .csv files).

Command:
    dbcopy -m <model name or digest> [-dbcopy.OutputDir <directory where text archive will be placed>]

Comments:
    If model name is specified then dbcopy looks in current working directory for .sqlite files with matching name.

    If model digest is specified then dbcopy looks inside all .sqlite files in current working directory for model with matching digest.

    If output directory is not specified? ... Verify archive name in that case.


Key packages, functions, and data structures:
    config.New
        Function that merges configuration arguments from ini file and arguments passed on command line.
        Defined in auxiliary package "config" in source file: /go/ompp/config/config.go
    
    db.Facet
        Is an enumeration (with underlying type uint8) that represents what type of database is being accessed: Sqlite, Postgres, MySql, MsSql, Oracle, Db2. ... Have to investigate further.

    main.dbToText
        Function that handles the most common operation: copying entire model from database to text archive.
        Defined in source file: go/dbcopy/dbToText.go

    db.IfEmptyMakeDefaultReadOnly
        Takes model name and two other runtime options as arguments. Not clear on what those represent.
        Returns a connection string and database driver name.
        During a step-through the values were:
            dbConnStr = "Database=RiskPaths.sqlite; Timeout=86400; OpenMode=ReadOnly;"
            dbDriver = "SQLite"

    db.Open
        Function opens database connection. It prepares arguments for the sql.Open function from the generic database package based on dbcopy configuration options.

    sql.Open
        The sql package is a generic database interface, and the Open function takes a pair of arguments: The first argument indicates which database driver to use, the second specifies the database connection string. The format of the second argument will depend on what type of database and driver you're using. Returns an instance of type sql.DB.

    sql.DB
        A database handle that represents a pool of zero or more underlying connections.

    db.GetModel
        db.GetModelId
        db.GetModelById
            db.getModel
                Creates pointer to a local variable of type db.ModelMeta.
                Invokes function SelectRows to get various portions of model metadata.
                
    db.SelectRows
        This function appears to do the bulk of database reads.
        It's called 78 times, several times in each of the db.Get<something> methods.
        Arguments: 
            database connection object, of type sql.DB
            query string
            function with type signature: (rows *sql.Rows) error
                These functions are defined inside the argument block of each invocation of SelectRows.
                Each invocation has a different definition.
                Each of these functions defines a collection of local variables with types that correspond to the column types of the rows they expect to receive as arguments.
                Each function calls Scan on the argument row, passing pointers to the collection of local arguments it defined beforehand. The values from the argument row get passed into these local arguments.
                
                Also these argument functions include references to the root data structure that's being built up. So for example calls of SelectRows in db.getModel have the argument function referring to the db.ModelMeta variable defined in outer scope. These variables get captured as function closures instead of being passed as arguments. 

    db.TrxSelectRows
        This one looks almost the same as db.SelectRows.
        The difference appears to be that instead of getting passed a sql.DB connection argument it gets passed a sql.Tx database transaction argument.

    db.ModelMeta
        Source file: go/ompp/db/dbModel.go
        Is a structure type representing how model metadata is stored in the database.
        db.TypeMeta
            Its the auxiliary type definitions that are part of the model source code, not golang types.
        db.ParamMeta
        db.TableMeta
            Output table metadata: the table name, dimensions, accumulators, expressions.
            db.TableDicRow
                This is a structure type whose fields are all simple types.
                It represents the column types of a JOIN of table_dic and model_table_dic tables.
                ModelId int
                TableId int
                TableHid int
                Name string
                ...
            db.TableDimsRow
                This is another structure type whose fields are all simple types.
                It represents the column types of a JOIN of table_dic_txt and model_table_dic tables.
                ModelId int
                TableId int
                LangCode string
                Descr string
                ...
            db.TableAccRow
            db.TableExprRow
        db.EntityMeta
        db.GroupMeta

    db.ModelTxtMeta
        Is a structure type representing how the language-specific portion of model metadata is stored in the database.
    
    These are called in sequence after obtaining the model metadata.
        main.toModelJson
        main.toRunListText
        main.toWorksetListText
        main.toTaskListJson

